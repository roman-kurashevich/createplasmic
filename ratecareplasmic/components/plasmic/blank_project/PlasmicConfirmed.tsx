// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7zgBTwbPpHbjHNGdtqUv3x
// Component: C2Z44i2ipT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: QtbTn9PNS3o/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 7zgBTwbPpHbjHNGdtqUv3x/projectcss
import sty from "./PlasmicConfirmed.module.css"; // plasmic-import: C2Z44i2ipT/css

import OutlineCommunicationUserIcon from "./icons/PlasmicIcon__OutlineCommunicationUser"; // plasmic-import: SjDzadmLB/icon
import OutlineGeneralCalendarIcon from "./icons/PlasmicIcon__OutlineGeneralCalendar"; // plasmic-import: k3aere2m9V/icon
import OutlineGeneralClockIcon from "./icons/PlasmicIcon__OutlineGeneralClock"; // plasmic-import: 2EyI6n-QWO/icon
import OutlineNavigationLocationIcon from "./icons/PlasmicIcon__OutlineNavigationLocation"; // plasmic-import: 8tkh8Hd-EQ/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: N_rBuzKEqCD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 8Xy2TdC8dVc/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: 0TsNv0K1B/icon
import Icon16PxCheckIcon from "./icons/PlasmicIcon__Icon16PxCheck"; // plasmic-import: XZAvKNBJmZ/icon
import Rectangle116Icon from "./icons/PlasmicIcon__Rectangle116"; // plasmic-import: vLDRE8TUZ/icon
import Group4195Icon from "./icons/PlasmicIcon__Group4195"; // plasmic-import: jA2NdGFwnK/icon
import Ellipse2Icon from "./icons/PlasmicIcon__Ellipse2"; // plasmic-import: u3wA3h_cil/icon

export type PlasmicConfirmed__VariantMembers = {};

export type PlasmicConfirmed__VariantsArgs = {};
type VariantPropType = keyof PlasmicConfirmed__VariantsArgs;
export const PlasmicConfirmed__VariantProps = new Array<VariantPropType>();

export type PlasmicConfirmed__ArgsType = {};
type ArgPropType = keyof PlasmicConfirmed__ArgsType;
export const PlasmicConfirmed__ArgProps = new Array<ArgPropType>();

export type PlasmicConfirmed__OverridesType = {
  root?: p.Flex<"div">;
  booking6?: p.Flex<"div">;
  frame4255?: p.Flex<"div">;
  frame4278?: p.Flex<"div">;
  frame4256?: p.Flex<"div">;
  frame4275?: p.Flex<"div">;
  frame4272?: p.Flex<"div">;
  frame4273?: p.Flex<"div">;
  group294?: p.Flex<"div">;
  rectangle129?: p.Flex<"div">;
  frame4279?: p.Flex<"div">;
  frame4274?: p.Flex<"div">;
  group293?: p.Flex<"div">;
  rectangle128?: p.Flex<"div">;
  frame4280?: p.Flex<"div">;
  frame4276?: p.Flex<"div">;
  group295?: p.Flex<"div">;
  rectangle130?: p.Flex<"div">;
  frame4281?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  button?: p.Flex<typeof Button>;
  header?: p.Flex<"div">;
  headerMenu?: p.Flex<"div">;
  menuItem?: p.Flex<"div">;
  menuItem2?: p.Flex<"div">;
  features?: p.Flex<"div">;
  menuItem3?: p.Flex<"div">;
  features2?: p.Flex<"div">;
  menuItem4?: p.Flex<"div">;
  features3?: p.Flex<"div">;
  controlPanel?: p.Flex<"div">;
  input?: p.Flex<"div">;
  label?: p.Flex<"div">;
  label2?: p.Flex<"div">;
  inputField?: p.Flex<"div">;
  text2?: p.Flex<"div">;
  hintMessage?: p.Flex<"div">;
  buttonContainer?: p.Flex<"div">;
  button2?: p.Flex<"div">;
  iconCopyBig2?: p.Flex<"div">;
  group287?: p.Flex<"div">;
  rectangle115?: p.Flex<"div">;
  text3?: p.Flex<"div">;
  iconSelectBig2?: p.Flex<"div">;
  rectangle120?: p.Flex<"div">;
  avatar?: p.Flex<"div">;
  mk?: p.Flex<"div">;
  mk2?: p.Flex<"div">;
};

export interface DefaultConfirmedProps {}

function PlasmicConfirmed__RenderFunc(props: {
  variants: PlasmicConfirmed__VariantsArgs;
  args: PlasmicConfirmed__ArgsType;
  overrides: PlasmicConfirmed__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"booking6"}
            data-plasmic-override={overrides.booking6}
            className={classNames(projectcss.all, sty.booking6)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame4255"}
              data-plasmic-override={overrides.frame4255}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame4255)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kSwf5
                )}
              >
                {"ðŸŽ‰"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame4278"}
                data-plasmic-override={overrides.frame4278}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame4278)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame4256"}
                  data-plasmic-override={overrides.frame4256}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame4256)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xmgkq
                    )}
                  >
                    {"Your booking is confirmed"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cfPcH
                    )}
                  >
                    {"Booking confirmation has been sent to your phone number"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame4275"}
                  data-plasmic-override={overrides.frame4275}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame4275)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame4272"}
                    data-plasmic-override={overrides.frame4272}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame4272)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame4273"}
                      data-plasmic-override={overrides.frame4273}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame4273)}
                    >
                      <div
                        data-plasmic-name={"group294"}
                        data-plasmic-override={overrides.group294}
                        className={classNames(projectcss.all, sty.group294)}
                      >
                        {false ? (
                          <div
                            data-plasmic-name={"rectangle129"}
                            data-plasmic-override={overrides.rectangle129}
                            className={classNames(
                              projectcss.all,
                              sty.rectangle129
                            )}
                          />
                        ) : null}

                        <OutlineCommunicationUserIcon
                          className={classNames(projectcss.all, sty.svg__fEon2)}
                          role={"img"}
                        />
                      </div>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame4279"}
                        data-plasmic-override={overrides.frame4279}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame4279)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wHzrL
                          )}
                        >
                          {"Jessy Mendiola"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eMUu
                          )}
                        >
                          {"General Dentist"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame4274"}
                    data-plasmic-override={overrides.frame4274}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame4274)}
                  >
                    <div
                      data-plasmic-name={"group293"}
                      data-plasmic-override={overrides.group293}
                      className={classNames(projectcss.all, sty.group293)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"rectangle128"}
                          data-plasmic-override={overrides.rectangle128}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle128
                          )}
                        />
                      ) : null}

                      <OutlineGeneralCalendarIcon
                        className={classNames(projectcss.all, sty.svg__iIa18)}
                        role={"img"}
                      />

                      {false ? (
                        <OutlineGeneralClockIcon
                          className={classNames(projectcss.all, sty.svg__hIbJ)}
                          role={"img"}
                        />
                      ) : null}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame4280"}
                      data-plasmic-override={overrides.frame4280}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame4280)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e5LcU
                        )}
                      >
                        {"Fri, 30 Sep 2022"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u2Fip
                        )}
                      >
                        {"9:30 pm"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame4276"}
                    data-plasmic-override={overrides.frame4276}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame4276)}
                  >
                    <div
                      data-plasmic-name={"group295"}
                      data-plasmic-override={overrides.group295}
                      className={classNames(projectcss.all, sty.group295)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"rectangle130"}
                          data-plasmic-override={overrides.rectangle130}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle130
                          )}
                        />
                      ) : null}
                      {false ? (
                        <OutlineGeneralCalendarIcon
                          className={classNames(projectcss.all, sty.svg__mm2Nl)}
                          role={"img"}
                        />
                      ) : null}

                      <OutlineNavigationLocationIcon
                        className={classNames(projectcss.all, sty.svg__tUtNt)}
                        role={"img"}
                      />

                      {false ? (
                        <OutlineGeneralClockIcon
                          className={classNames(projectcss.all, sty.svg__noi26)}
                          role={"img"}
                        />
                      ) : null}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame4281"}
                      data-plasmic-override={overrides.frame4281}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame4281)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rdjF2
                        )}
                      >
                        {"Medcare Medical Center"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___20E0
                        )}
                      >
                        {"1st street, Trio Building, Dubai"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  platform={"nextjs"}
                >
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    link={`/home-page`}
                  >
                    {"New appointment"}
                  </Button>
                </p.PlasmicLink>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0F6C
                )}
              >
                {"RateCare"}
              </div>

              {false ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"headerMenu"}
                  data-plasmic-override={overrides.headerMenu}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.headerMenu)}
                >
                  <div
                    data-plasmic-name={"menuItem"}
                    data-plasmic-override={overrides.menuItem}
                    className={classNames(projectcss.all, sty.menuItem)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0UpV8
                      )}
                    >
                      {"Features"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"menuItem2"}
                    data-plasmic-override={overrides.menuItem2}
                    className={classNames(projectcss.all, sty.menuItem2)}
                  >
                    <div
                      data-plasmic-name={"features"}
                      data-plasmic-override={overrides.features}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.features
                      )}
                    >
                      {"Pricing"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"menuItem3"}
                    data-plasmic-override={overrides.menuItem3}
                    className={classNames(projectcss.all, sty.menuItem3)}
                  >
                    <div
                      data-plasmic-name={"features2"}
                      data-plasmic-override={overrides.features2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.features2
                      )}
                    >
                      {"Learn"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"menuItem4"}
                    data-plasmic-override={overrides.menuItem4}
                    className={classNames(projectcss.all, sty.menuItem4)}
                  >
                    <div
                      data-plasmic-name={"features3"}
                      data-plasmic-override={overrides.features3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.features3
                      )}
                    >
                      {"Community"}
                    </div>
                  </div>
                </p.Stack>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"controlPanel"}
                data-plasmic-override={overrides.controlPanel}
                hasGap={true}
                className={classNames(projectcss.all, sty.controlPanel)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"input"}
                    data-plasmic-override={overrides.input}
                    className={classNames(projectcss.all, sty.input)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"label"}
                        data-plasmic-override={overrides.label}
                        className={classNames(projectcss.all, sty.label)}
                      >
                        <div
                          data-plasmic-name={"label2"}
                          data-plasmic-override={overrides.label2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.label2
                          )}
                        >
                          {"Label"}
                        </div>
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"inputField"}
                      data-plasmic-override={overrides.inputField}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.inputField)}
                    >
                      <SearchIcon
                        className={classNames(projectcss.all, sty.svg__cp6M0)}
                        role={"img"}
                      />

                      <div
                        data-plasmic-name={"text2"}
                        data-plasmic-override={overrides.text2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text2
                        )}
                      >
                        {"Search"}
                      </div>

                      {false ? (
                        <Icon16PxCheckIcon
                          className={classNames(projectcss.all, sty.svg__h6ES5)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    {false ? (
                      <div
                        data-plasmic-name={"hintMessage"}
                        data-plasmic-override={overrides.hintMessage}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.hintMessage
                        )}
                      >
                        {"Hint message"}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {false ? (
                  <div
                    data-plasmic-name={"buttonContainer"}
                    data-plasmic-override={overrides.buttonContainer}
                    className={classNames(projectcss.all, sty.buttonContainer)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.button2)}
                    >
                      <div
                        data-plasmic-name={"iconCopyBig2"}
                        data-plasmic-override={overrides.iconCopyBig2}
                        className={classNames(projectcss.all, sty.iconCopyBig2)}
                      >
                        <div
                          data-plasmic-name={"group287"}
                          data-plasmic-override={overrides.group287}
                          className={classNames(projectcss.all, sty.group287)}
                        >
                          <div
                            data-plasmic-name={"rectangle115"}
                            data-plasmic-override={overrides.rectangle115}
                            className={classNames(
                              projectcss.all,
                              sty.rectangle115
                            )}
                          />

                          <Rectangle116Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jcl67
                            )}
                            role={"img"}
                          />
                        </div>
                      </div>

                      <div
                        data-plasmic-name={"text3"}
                        data-plasmic-override={overrides.text3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text3
                        )}
                      >
                        {"Button"}
                      </div>

                      {false ? (
                        <div
                          data-plasmic-name={"iconSelectBig2"}
                          data-plasmic-override={overrides.iconSelectBig2}
                          className={classNames(
                            projectcss.all,
                            sty.iconSelectBig2
                          )}
                        >
                          <Group4195Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bzs3M
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      {false ? (
                        <div
                          data-plasmic-name={"rectangle120"}
                          data-plasmic-override={overrides.rectangle120}
                          className={classNames(
                            projectcss.all,
                            sty.rectangle120
                          )}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}

                <div
                  data-plasmic-name={"avatar"}
                  data-plasmic-override={overrides.avatar}
                  className={classNames(projectcss.all, sty.avatar)}
                >
                  <Ellipse2Icon
                    className={classNames(projectcss.all, sty.svg___8CRyj)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"mk"}
                    data-plasmic-override={overrides.mk}
                    className={classNames(projectcss.all, sty.mk)}
                  >
                    <div
                      data-plasmic-name={"mk2"}
                      data-plasmic-override={overrides.mk2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.mk2
                      )}
                    >
                      {"SR"}
                    </div>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "booking6",
    "frame4255",
    "frame4278",
    "frame4256",
    "frame4275",
    "frame4272",
    "frame4273",
    "group294",
    "rectangle129",
    "frame4279",
    "frame4274",
    "group293",
    "rectangle128",
    "frame4280",
    "frame4276",
    "group295",
    "rectangle130",
    "frame4281",
    "link",
    "button",
    "header",
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3",
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "text2",
    "hintMessage",
    "buttonContainer",
    "button2",
    "iconCopyBig2",
    "group287",
    "rectangle115",
    "text3",
    "iconSelectBig2",
    "rectangle120",
    "avatar",
    "mk",
    "mk2"
  ],
  booking6: [
    "booking6",
    "frame4255",
    "frame4278",
    "frame4256",
    "frame4275",
    "frame4272",
    "frame4273",
    "group294",
    "rectangle129",
    "frame4279",
    "frame4274",
    "group293",
    "rectangle128",
    "frame4280",
    "frame4276",
    "group295",
    "rectangle130",
    "frame4281",
    "link",
    "button",
    "header",
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3",
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "text2",
    "hintMessage",
    "buttonContainer",
    "button2",
    "iconCopyBig2",
    "group287",
    "rectangle115",
    "text3",
    "iconSelectBig2",
    "rectangle120",
    "avatar",
    "mk",
    "mk2"
  ],
  frame4255: [
    "frame4255",
    "frame4278",
    "frame4256",
    "frame4275",
    "frame4272",
    "frame4273",
    "group294",
    "rectangle129",
    "frame4279",
    "frame4274",
    "group293",
    "rectangle128",
    "frame4280",
    "frame4276",
    "group295",
    "rectangle130",
    "frame4281",
    "link",
    "button"
  ],
  frame4278: [
    "frame4278",
    "frame4256",
    "frame4275",
    "frame4272",
    "frame4273",
    "group294",
    "rectangle129",
    "frame4279",
    "frame4274",
    "group293",
    "rectangle128",
    "frame4280",
    "frame4276",
    "group295",
    "rectangle130",
    "frame4281",
    "link",
    "button"
  ],
  frame4256: ["frame4256"],
  frame4275: [
    "frame4275",
    "frame4272",
    "frame4273",
    "group294",
    "rectangle129",
    "frame4279",
    "frame4274",
    "group293",
    "rectangle128",
    "frame4280",
    "frame4276",
    "group295",
    "rectangle130",
    "frame4281"
  ],
  frame4272: [
    "frame4272",
    "frame4273",
    "group294",
    "rectangle129",
    "frame4279"
  ],
  frame4273: ["frame4273", "group294", "rectangle129", "frame4279"],
  group294: ["group294", "rectangle129"],
  rectangle129: ["rectangle129"],
  frame4279: ["frame4279"],
  frame4274: ["frame4274", "group293", "rectangle128", "frame4280"],
  group293: ["group293", "rectangle128"],
  rectangle128: ["rectangle128"],
  frame4280: ["frame4280"],
  frame4276: ["frame4276", "group295", "rectangle130", "frame4281"],
  group295: ["group295", "rectangle130"],
  rectangle130: ["rectangle130"],
  frame4281: ["frame4281"],
  link: ["link", "button"],
  button: ["button"],
  header: [
    "header",
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3",
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "text2",
    "hintMessage",
    "buttonContainer",
    "button2",
    "iconCopyBig2",
    "group287",
    "rectangle115",
    "text3",
    "iconSelectBig2",
    "rectangle120",
    "avatar",
    "mk",
    "mk2"
  ],
  headerMenu: [
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3"
  ],
  menuItem: ["menuItem"],
  menuItem2: ["menuItem2", "features"],
  features: ["features"],
  menuItem3: ["menuItem3", "features2"],
  features2: ["features2"],
  menuItem4: ["menuItem4", "features3"],
  features3: ["features3"],
  controlPanel: [
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "text2",
    "hintMessage",
    "buttonContainer",
    "button2",
    "iconCopyBig2",
    "group287",
    "rectangle115",
    "text3",
    "iconSelectBig2",
    "rectangle120",
    "avatar",
    "mk",
    "mk2"
  ],
  input: ["input", "label", "label2", "inputField", "text2", "hintMessage"],
  label: ["label", "label2"],
  label2: ["label2"],
  inputField: ["inputField", "text2"],
  text2: ["text2"],
  hintMessage: ["hintMessage"],
  buttonContainer: [
    "buttonContainer",
    "button2",
    "iconCopyBig2",
    "group287",
    "rectangle115",
    "text3",
    "iconSelectBig2",
    "rectangle120"
  ],
  button2: [
    "button2",
    "iconCopyBig2",
    "group287",
    "rectangle115",
    "text3",
    "iconSelectBig2",
    "rectangle120"
  ],
  iconCopyBig2: ["iconCopyBig2", "group287", "rectangle115"],
  group287: ["group287", "rectangle115"],
  rectangle115: ["rectangle115"],
  text3: ["text3"],
  iconSelectBig2: ["iconSelectBig2"],
  rectangle120: ["rectangle120"],
  avatar: ["avatar", "mk", "mk2"],
  mk: ["mk", "mk2"],
  mk2: ["mk2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  booking6: "div";
  frame4255: "div";
  frame4278: "div";
  frame4256: "div";
  frame4275: "div";
  frame4272: "div";
  frame4273: "div";
  group294: "div";
  rectangle129: "div";
  frame4279: "div";
  frame4274: "div";
  group293: "div";
  rectangle128: "div";
  frame4280: "div";
  frame4276: "div";
  group295: "div";
  rectangle130: "div";
  frame4281: "div";
  link: "a";
  button: typeof Button;
  header: "div";
  headerMenu: "div";
  menuItem: "div";
  menuItem2: "div";
  features: "div";
  menuItem3: "div";
  features2: "div";
  menuItem4: "div";
  features3: "div";
  controlPanel: "div";
  input: "div";
  label: "div";
  label2: "div";
  inputField: "div";
  text2: "div";
  hintMessage: "div";
  buttonContainer: "div";
  button2: "div";
  iconCopyBig2: "div";
  group287: "div";
  rectangle115: "div";
  text3: "div";
  iconSelectBig2: "div";
  rectangle120: "div";
  avatar: "div";
  mk: "div";
  mk2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConfirmed__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConfirmed__VariantsArgs;
    args?: PlasmicConfirmed__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicConfirmed__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConfirmed__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicConfirmed__ArgProps,
          internalVariantPropNames: PlasmicConfirmed__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicConfirmed__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConfirmed";
  } else {
    func.displayName = `PlasmicConfirmed.${nodeName}`;
  }
  return func;
}

export const PlasmicConfirmed = Object.assign(
  // Top-level PlasmicConfirmed renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    booking6: makeNodeComponent("booking6"),
    frame4255: makeNodeComponent("frame4255"),
    frame4278: makeNodeComponent("frame4278"),
    frame4256: makeNodeComponent("frame4256"),
    frame4275: makeNodeComponent("frame4275"),
    frame4272: makeNodeComponent("frame4272"),
    frame4273: makeNodeComponent("frame4273"),
    group294: makeNodeComponent("group294"),
    rectangle129: makeNodeComponent("rectangle129"),
    frame4279: makeNodeComponent("frame4279"),
    frame4274: makeNodeComponent("frame4274"),
    group293: makeNodeComponent("group293"),
    rectangle128: makeNodeComponent("rectangle128"),
    frame4280: makeNodeComponent("frame4280"),
    frame4276: makeNodeComponent("frame4276"),
    group295: makeNodeComponent("group295"),
    rectangle130: makeNodeComponent("rectangle130"),
    frame4281: makeNodeComponent("frame4281"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),
    header: makeNodeComponent("header"),
    headerMenu: makeNodeComponent("headerMenu"),
    menuItem: makeNodeComponent("menuItem"),
    menuItem2: makeNodeComponent("menuItem2"),
    features: makeNodeComponent("features"),
    menuItem3: makeNodeComponent("menuItem3"),
    features2: makeNodeComponent("features2"),
    menuItem4: makeNodeComponent("menuItem4"),
    features3: makeNodeComponent("features3"),
    controlPanel: makeNodeComponent("controlPanel"),
    input: makeNodeComponent("input"),
    label: makeNodeComponent("label"),
    label2: makeNodeComponent("label2"),
    inputField: makeNodeComponent("inputField"),
    text2: makeNodeComponent("text2"),
    hintMessage: makeNodeComponent("hintMessage"),
    buttonContainer: makeNodeComponent("buttonContainer"),
    button2: makeNodeComponent("button2"),
    iconCopyBig2: makeNodeComponent("iconCopyBig2"),
    group287: makeNodeComponent("group287"),
    rectangle115: makeNodeComponent("rectangle115"),
    text3: makeNodeComponent("text3"),
    iconSelectBig2: makeNodeComponent("iconSelectBig2"),
    rectangle120: makeNodeComponent("rectangle120"),
    avatar: makeNodeComponent("avatar"),
    mk: makeNodeComponent("mk"),
    mk2: makeNodeComponent("mk2"),

    // Metadata about props expected for PlasmicConfirmed
    internalVariantProps: PlasmicConfirmed__VariantProps,
    internalArgProps: PlasmicConfirmed__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicConfirmed;
/* prettier-ignore-end */
