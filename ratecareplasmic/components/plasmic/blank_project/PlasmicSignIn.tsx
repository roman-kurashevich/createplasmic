// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7zgBTwbPpHbjHNGdtqUv3x
// Component: PZxVCIQoxU4k
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 7zgBTwbPpHbjHNGdtqUv3x/projectcss
import sty from "./PlasmicSignIn.module.css"; // plasmic-import: PZxVCIQoxU4k/css

import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: 0TsNv0K1B/icon
import Icon16PxCheckIcon from "./icons/PlasmicIcon__Icon16PxCheck"; // plasmic-import: XZAvKNBJmZ/icon
import Ellipse2Icon from "./icons/PlasmicIcon__Ellipse2"; // plasmic-import: u3wA3h_cil/icon
import Rectangle115Icon from "./icons/PlasmicIcon__Rectangle115"; // plasmic-import: h4Bl-EXfgf/icon
import Group4195Icon from "./icons/PlasmicIcon__Group4195"; // plasmic-import: jA2NdGFwnK/icon
import Ellipse3Icon from "./icons/PlasmicIcon__Ellipse3"; // plasmic-import: wyJsdEXVBs/icon

export type PlasmicSignIn__VariantMembers = {};

export type PlasmicSignIn__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignIn__VariantsArgs;
export const PlasmicSignIn__VariantProps = new Array<VariantPropType>();

export type PlasmicSignIn__ArgsType = {};
type ArgPropType = keyof PlasmicSignIn__ArgsType;
export const PlasmicSignIn__ArgProps = new Array<ArgPropType>();

export type PlasmicSignIn__OverridesType = {
  root?: p.Flex<"div">;
  signUp1?: p.Flex<"div">;
  header?: p.Flex<"div">;
  headerMenu?: p.Flex<"div">;
  menuItem?: p.Flex<"div">;
  menuItem2?: p.Flex<"div">;
  features?: p.Flex<"div">;
  menuItem3?: p.Flex<"div">;
  features2?: p.Flex<"div">;
  menuItem4?: p.Flex<"div">;
  features3?: p.Flex<"div">;
  controlPanel?: p.Flex<"div">;
  input?: p.Flex<"div">;
  label?: p.Flex<"div">;
  label2?: p.Flex<"div">;
  inputField?: p.Flex<"div">;
  hintMessage?: p.Flex<"div">;
  buttonContainer?: p.Flex<"div">;
  avatar?: p.Flex<"div">;
  mk?: p.Flex<"div">;
  mk2?: p.Flex<"div">;
  form?: p.Flex<"div">;
  signIn?: p.Flex<"div">;
  fields?: p.Flex<"div">;
  input2?: p.Flex<"div">;
  hintMessage2?: p.Flex<"div">;
  input3?: p.Flex<"div">;
  hintMessage3?: p.Flex<"div">;
  label8?: p.Flex<"div">;
  input4?: p.Flex<"div">;
  hintMessage4?: p.Flex<"div">;
  textInput?: p.Flex<"input">;
  button?: p.Flex<"a"> & Partial<LinkProps>;
  iconCopyBig?: p.Flex<"div">;
  group286?: p.Flex<"div">;
  rectangle114?: p.Flex<"div">;
  text5?: p.Flex<"div">;
  iconSelectBig?: p.Flex<"div">;
  rectangle119?: p.Flex<"div">;
  signInLink?: p.Flex<"div">;
  text6?: p.Flex<"div">;
  link?: p.Flex<"div">;
  link2?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  rectangle120?: p.Flex<"div">;
  rectangle121?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
};

export interface DefaultSignInProps {}

function PlasmicSignIn__RenderFunc(props: {
  variants: PlasmicSignIn__VariantsArgs;
  args: PlasmicSignIn__ArgsType;
  overrides: PlasmicSignIn__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"signUp1"}
            data-plasmic-override={overrides.signUp1}
            className={classNames(projectcss.all, sty.signUp1)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__c94Yb
                )}
              >
                {"RateCare"}
              </div>

              {false ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"headerMenu"}
                  data-plasmic-override={overrides.headerMenu}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.headerMenu)}
                >
                  <div
                    data-plasmic-name={"menuItem"}
                    data-plasmic-override={overrides.menuItem}
                    className={classNames(projectcss.all, sty.menuItem)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qoJqJ
                      )}
                    >
                      {"Features"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"menuItem2"}
                    data-plasmic-override={overrides.menuItem2}
                    className={classNames(projectcss.all, sty.menuItem2)}
                  >
                    <div
                      data-plasmic-name={"features"}
                      data-plasmic-override={overrides.features}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.features
                      )}
                    >
                      {"Pricing"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"menuItem3"}
                    data-plasmic-override={overrides.menuItem3}
                    className={classNames(projectcss.all, sty.menuItem3)}
                  >
                    <div
                      data-plasmic-name={"features2"}
                      data-plasmic-override={overrides.features2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.features2
                      )}
                    >
                      {"Learn"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"menuItem4"}
                    data-plasmic-override={overrides.menuItem4}
                    className={classNames(projectcss.all, sty.menuItem4)}
                  >
                    <div
                      data-plasmic-name={"features3"}
                      data-plasmic-override={overrides.features3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.features3
                      )}
                    >
                      {"Community"}
                    </div>
                  </div>
                </p.Stack>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"controlPanel"}
                data-plasmic-override={overrides.controlPanel}
                hasGap={true}
                className={classNames(projectcss.all, sty.controlPanel)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"input"}
                    data-plasmic-override={overrides.input}
                    className={classNames(projectcss.all, sty.input)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"label"}
                        data-plasmic-override={overrides.label}
                        className={classNames(projectcss.all, sty.label)}
                      >
                        <div
                          data-plasmic-name={"label2"}
                          data-plasmic-override={overrides.label2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.label2
                          )}
                        >
                          {"Label"}
                        </div>
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"inputField"}
                      data-plasmic-override={overrides.inputField}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.inputField)}
                    >
                      <SearchIcon
                        className={classNames(projectcss.all, sty.svg__vyPmn)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1DlAu
                        )}
                      >
                        {"Search"}
                      </div>

                      {false ? (
                        <Icon16PxCheckIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___9S0Z6
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    {false ? (
                      <div
                        data-plasmic-name={"hintMessage"}
                        data-plasmic-override={overrides.hintMessage}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.hintMessage
                        )}
                      >
                        {"Hint message"}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {false ? (
                  <div
                    data-plasmic-name={"buttonContainer"}
                    data-plasmic-override={overrides.buttonContainer}
                    className={classNames(projectcss.all, sty.buttonContainer)}
                  />
                ) : null}

                <div
                  data-plasmic-name={"avatar"}
                  data-plasmic-override={overrides.avatar}
                  className={classNames(projectcss.all, sty.avatar)}
                >
                  <Ellipse2Icon
                    className={classNames(projectcss.all, sty.svg__ildtr)}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"mk"}
                    data-plasmic-override={overrides.mk}
                    className={classNames(projectcss.all, sty.mk)}
                  >
                    <div
                      data-plasmic-name={"mk2"}
                      data-plasmic-override={overrides.mk2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.mk2
                      )}
                    >
                      {"SR"}
                    </div>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"form"}
              data-plasmic-override={overrides.form}
              hasGap={true}
              className={classNames(projectcss.all, sty.form)}
            >
              <div
                data-plasmic-name={"signIn"}
                data-plasmic-override={overrides.signIn}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.signIn
                )}
              >
                {"Sign in"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"fields"}
                data-plasmic-override={overrides.fields}
                hasGap={true}
                className={classNames(projectcss.all, sty.fields)}
              >
                <div
                  data-plasmic-name={"input2"}
                  data-plasmic-override={overrides.input2}
                  className={classNames(projectcss.all, sty.input2)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"hintMessage2"}
                      data-plasmic-override={overrides.hintMessage2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.hintMessage2
                      )}
                    >
                      {"Hint message"}
                    </div>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"input3"}
                  data-plasmic-override={overrides.input3}
                  className={classNames(projectcss.all, sty.input3)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"hintMessage3"}
                      data-plasmic-override={overrides.hintMessage3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.hintMessage3
                      )}
                    >
                      {"Hint message"}
                    </div>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"label8"}
                  data-plasmic-override={overrides.label8}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label8
                  )}
                >
                  {"Phone number"}
                </div>

                <div
                  data-plasmic-name={"input4"}
                  data-plasmic-override={overrides.input4}
                  className={classNames(projectcss.all, sty.input4)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"hintMessage4"}
                      data-plasmic-override={overrides.hintMessage4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.hintMessage4
                      )}
                    >
                      {"Hint message"}
                    </div>
                  ) : null}

                  <input
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={
                      overrides.textInput ?? overrides.textbox
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textInput
                    )}
                    placeholder={"Phone number" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"" as const}
                  />
                </div>
              </p.Stack>

              <p.Stack
                as={p.PlasmicLink}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(projectcss.all, projectcss.a, sty.button)}
                component={Link}
                href={`/enter-code`}
                platform={"nextjs"}
              >
                {false ? (
                  <div
                    data-plasmic-name={"iconCopyBig"}
                    data-plasmic-override={overrides.iconCopyBig}
                    className={classNames(projectcss.all, sty.iconCopyBig)}
                  >
                    <div
                      data-plasmic-name={"group286"}
                      data-plasmic-override={overrides.group286}
                      className={classNames(projectcss.all, sty.group286)}
                    >
                      <div
                        data-plasmic-name={"rectangle114"}
                        data-plasmic-override={overrides.rectangle114}
                        className={classNames(projectcss.all, sty.rectangle114)}
                      />

                      <Rectangle115Icon
                        className={classNames(projectcss.all, sty.svg__bhlYt)}
                        role={"img"}
                      />
                    </div>
                  </div>
                ) : null}

                <div
                  data-plasmic-name={"text5"}
                  data-plasmic-override={overrides.text5}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text5
                  )}
                >
                  {"Sign in"}
                </div>

                {false ? (
                  <div
                    data-plasmic-name={"iconSelectBig"}
                    data-plasmic-override={overrides.iconSelectBig}
                    className={classNames(projectcss.all, sty.iconSelectBig)}
                  >
                    <Group4195Icon
                      className={classNames(projectcss.all, sty.svg__ueZ0U)}
                      role={"img"}
                    />
                  </div>
                ) : null}
                {false ? (
                  <div
                    data-plasmic-name={"rectangle119"}
                    data-plasmic-override={overrides.rectangle119}
                    className={classNames(projectcss.all, sty.rectangle119)}
                  />
                ) : null}
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"signInLink"}
                data-plasmic-override={overrides.signInLink}
                hasGap={true}
                className={classNames(projectcss.all, sty.signInLink)}
              >
                <div
                  data-plasmic-name={"text6"}
                  data-plasmic-override={overrides.text6}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text6
                  )}
                >
                  {"Don't have an account?"}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.link)}
                >
                  <div
                    data-plasmic-name={"link2"}
                    data-plasmic-override={overrides.link2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.link2
                    )}
                  >
                    {"Sign up"}
                  </div>

                  {false ? (
                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"20px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"20px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/blank_project/images/eyeOpen.svg",
                        fullWidth: 20,
                        fullHeight: 20,
                        aspectRatio: 1
                      }}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <div
              data-plasmic-name={"rectangle120"}
              data-plasmic-override={overrides.rectangle120}
              className={classNames(projectcss.all, sty.rectangle120)}
            />

            <Ellipse3Icon
              className={classNames(projectcss.all, sty.svg__pHixr)}
              role={"img"}
            />

            <div
              data-plasmic-name={"rectangle121"}
              data-plasmic-override={overrides.rectangle121}
              className={classNames(projectcss.all, sty.rectangle121)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "signUp1",
    "header",
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3",
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "hintMessage",
    "buttonContainer",
    "avatar",
    "mk",
    "mk2",
    "form",
    "signIn",
    "fields",
    "input2",
    "hintMessage2",
    "input3",
    "hintMessage3",
    "label8",
    "input4",
    "hintMessage4",
    "textInput",
    "textbox",
    "button",
    "iconCopyBig",
    "group286",
    "rectangle114",
    "text5",
    "iconSelectBig",
    "rectangle119",
    "signInLink",
    "text6",
    "link",
    "link2",
    "img",
    "rectangle120",
    "rectangle121"
  ],
  signUp1: [
    "signUp1",
    "header",
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3",
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "hintMessage",
    "buttonContainer",
    "avatar",
    "mk",
    "mk2",
    "form",
    "signIn",
    "fields",
    "input2",
    "hintMessage2",
    "input3",
    "hintMessage3",
    "label8",
    "input4",
    "hintMessage4",
    "textInput",
    "textbox",
    "button",
    "iconCopyBig",
    "group286",
    "rectangle114",
    "text5",
    "iconSelectBig",
    "rectangle119",
    "signInLink",
    "text6",
    "link",
    "link2",
    "img",
    "rectangle120",
    "rectangle121"
  ],
  header: [
    "header",
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3",
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "hintMessage",
    "buttonContainer",
    "avatar",
    "mk",
    "mk2"
  ],
  headerMenu: [
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3"
  ],
  menuItem: ["menuItem"],
  menuItem2: ["menuItem2", "features"],
  features: ["features"],
  menuItem3: ["menuItem3", "features2"],
  features2: ["features2"],
  menuItem4: ["menuItem4", "features3"],
  features3: ["features3"],
  controlPanel: [
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "hintMessage",
    "buttonContainer",
    "avatar",
    "mk",
    "mk2"
  ],
  input: ["input", "label", "label2", "inputField", "hintMessage"],
  label: ["label", "label2"],
  label2: ["label2"],
  inputField: ["inputField"],
  hintMessage: ["hintMessage"],
  buttonContainer: ["buttonContainer"],
  avatar: ["avatar", "mk", "mk2"],
  mk: ["mk", "mk2"],
  mk2: ["mk2"],
  form: [
    "form",
    "signIn",
    "fields",
    "input2",
    "hintMessage2",
    "input3",
    "hintMessage3",
    "label8",
    "input4",
    "hintMessage4",
    "textInput",
    "textbox",
    "button",
    "iconCopyBig",
    "group286",
    "rectangle114",
    "text5",
    "iconSelectBig",
    "rectangle119",
    "signInLink",
    "text6",
    "link",
    "link2",
    "img"
  ],
  signIn: ["signIn"],
  fields: [
    "fields",
    "input2",
    "hintMessage2",
    "input3",
    "hintMessage3",
    "label8",
    "input4",
    "hintMessage4",
    "textInput",
    "textbox"
  ],
  input2: ["input2", "hintMessage2"],
  hintMessage2: ["hintMessage2"],
  input3: ["input3", "hintMessage3"],
  hintMessage3: ["hintMessage3"],
  label8: ["label8"],
  input4: ["input4", "hintMessage4", "textInput", "textbox"],
  hintMessage4: ["hintMessage4"],
  textInput: ["textInput", "textbox"],
  button: [
    "button",
    "iconCopyBig",
    "group286",
    "rectangle114",
    "text5",
    "iconSelectBig",
    "rectangle119"
  ],
  iconCopyBig: ["iconCopyBig", "group286", "rectangle114"],
  group286: ["group286", "rectangle114"],
  rectangle114: ["rectangle114"],
  text5: ["text5"],
  iconSelectBig: ["iconSelectBig"],
  rectangle119: ["rectangle119"],
  signInLink: ["signInLink", "text6", "link", "link2", "img"],
  text6: ["text6"],
  link: ["link", "link2", "img"],
  link2: ["link2"],
  img: ["img"],
  rectangle120: ["rectangle120"],
  rectangle121: ["rectangle121"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  signUp1: "div";
  header: "div";
  headerMenu: "div";
  menuItem: "div";
  menuItem2: "div";
  features: "div";
  menuItem3: "div";
  features2: "div";
  menuItem4: "div";
  features3: "div";
  controlPanel: "div";
  input: "div";
  label: "div";
  label2: "div";
  inputField: "div";
  hintMessage: "div";
  buttonContainer: "div";
  avatar: "div";
  mk: "div";
  mk2: "div";
  form: "div";
  signIn: "div";
  fields: "div";
  input2: "div";
  hintMessage2: "div";
  input3: "div";
  hintMessage3: "div";
  label8: "div";
  input4: "div";
  hintMessage4: "div";
  textInput: "input";
  button: "a";
  iconCopyBig: "div";
  group286: "div";
  rectangle114: "div";
  text5: "div";
  iconSelectBig: "div";
  rectangle119: "div";
  signInLink: "div";
  text6: "div";
  link: "div";
  link2: "div";
  img: typeof p.PlasmicImg;
  rectangle120: "div";
  rectangle121: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignIn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignIn__VariantsArgs;
    args?: PlasmicSignIn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignIn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSignIn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignIn__ArgProps,
          internalVariantPropNames: PlasmicSignIn__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSignIn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignIn";
  } else {
    func.displayName = `PlasmicSignIn.${nodeName}`;
  }
  return func;
}

export const PlasmicSignIn = Object.assign(
  // Top-level PlasmicSignIn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    signUp1: makeNodeComponent("signUp1"),
    header: makeNodeComponent("header"),
    headerMenu: makeNodeComponent("headerMenu"),
    menuItem: makeNodeComponent("menuItem"),
    menuItem2: makeNodeComponent("menuItem2"),
    features: makeNodeComponent("features"),
    menuItem3: makeNodeComponent("menuItem3"),
    features2: makeNodeComponent("features2"),
    menuItem4: makeNodeComponent("menuItem4"),
    features3: makeNodeComponent("features3"),
    controlPanel: makeNodeComponent("controlPanel"),
    input: makeNodeComponent("input"),
    label: makeNodeComponent("label"),
    label2: makeNodeComponent("label2"),
    inputField: makeNodeComponent("inputField"),
    hintMessage: makeNodeComponent("hintMessage"),
    buttonContainer: makeNodeComponent("buttonContainer"),
    avatar: makeNodeComponent("avatar"),
    mk: makeNodeComponent("mk"),
    mk2: makeNodeComponent("mk2"),
    form: makeNodeComponent("form"),
    signIn: makeNodeComponent("signIn"),
    fields: makeNodeComponent("fields"),
    input2: makeNodeComponent("input2"),
    hintMessage2: makeNodeComponent("hintMessage2"),
    input3: makeNodeComponent("input3"),
    hintMessage3: makeNodeComponent("hintMessage3"),
    label8: makeNodeComponent("label8"),
    input4: makeNodeComponent("input4"),
    hintMessage4: makeNodeComponent("hintMessage4"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    iconCopyBig: makeNodeComponent("iconCopyBig"),
    group286: makeNodeComponent("group286"),
    rectangle114: makeNodeComponent("rectangle114"),
    text5: makeNodeComponent("text5"),
    iconSelectBig: makeNodeComponent("iconSelectBig"),
    rectangle119: makeNodeComponent("rectangle119"),
    signInLink: makeNodeComponent("signInLink"),
    text6: makeNodeComponent("text6"),
    link: makeNodeComponent("link"),
    link2: makeNodeComponent("link2"),
    img: makeNodeComponent("img"),
    rectangle120: makeNodeComponent("rectangle120"),
    rectangle121: makeNodeComponent("rectangle121"),

    // Metadata about props expected for PlasmicSignIn
    internalVariantProps: PlasmicSignIn__VariantProps,
    internalArgProps: PlasmicSignIn__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignIn;
/* prettier-ignore-end */
