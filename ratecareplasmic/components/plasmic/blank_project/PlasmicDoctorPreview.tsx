// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7zgBTwbPpHbjHNGdtqUv3x
// Component: jb-pn_CJ2Ad
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: QtbTn9PNS3o/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 7zgBTwbPpHbjHNGdtqUv3x/projectcss
import sty from "./PlasmicDoctorPreview.module.css"; // plasmic-import: jb-pn_CJ2Ad/css

import DotIcon from "./icons/PlasmicIcon__Dot"; // plasmic-import: WJL6dah7XM/icon
import CloseIcon from "./icons/PlasmicIcon__Close"; // plasmic-import: rfT6DL-7O-/icon
import SolidGeneralHomeIcon from "./icons/PlasmicIcon__SolidGeneralHome"; // plasmic-import: NhVUZxYXuH/icon
import Line4Icon from "./icons/PlasmicIcon__Line4"; // plasmic-import: Yw-cDn_GBL/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: N_rBuzKEqCD/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 8Xy2TdC8dVc/icon

export type PlasmicDoctorPreview__VariantMembers = {};

export type PlasmicDoctorPreview__VariantsArgs = {};
type VariantPropType = keyof PlasmicDoctorPreview__VariantsArgs;
export const PlasmicDoctorPreview__VariantProps = new Array<VariantPropType>();

export type PlasmicDoctorPreview__ArgsType = {
  jessyMendiola?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  label4?: React.ReactNode;
  label2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDoctorPreview__ArgsType;
export const PlasmicDoctorPreview__ArgProps = new Array<ArgPropType>(
  "jessyMendiola",
  "children",
  "slot",
  "slot2",
  "slot3",
  "label4",
  "label2"
);

export type PlasmicDoctorPreview__OverridesType = {
  root?: p.Flex<"div">;
  frame36?: p.Flex<"div">;
  frame37?: p.Flex<"div">;
  frame38?: p.Flex<"div">;
  badge?: p.Flex<"div">;
  label?: p.Flex<"div">;
  label3?: p.Flex<"div">;
  frame39?: p.Flex<"div">;
  frame40?: p.Flex<"div">;
  frame45?: p.Flex<"div">;
  frame46?: p.Flex<"div">;
  frame47?: p.Flex<"div">;
  frame48?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  frame1616?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  frame49?: p.Flex<"div">;
  frame4281?: p.Flex<"div">;
  location2?: p.Flex<"div">;
  frame4271?: p.Flex<"div">;
  frame4269?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  button?: p.Flex<typeof Button>;
  frame4286?: p.Flex<"div">;
};

export interface DefaultDoctorPreviewProps {
  jessyMendiola?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  label4?: React.ReactNode;
  label2?: React.ReactNode;
  className?: string;
}

function PlasmicDoctorPreview__RenderFunc(props: {
  variants: PlasmicDoctorPreview__VariantsArgs;
  args: PlasmicDoctorPreview__ArgsType;
  overrides: PlasmicDoctorPreview__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__e201T)}
            displayHeight={"153px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"167px" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/blank_project/images/rectangle124Jpg.jpeg",
              fullWidth: 150,
              fullHeight: 150,
              aspectRatio: undefined
            }}
          />
        ),

        value: args.slot2
      })}

      <p.Stack
        as={"div"}
        data-plasmic-name={"frame36"}
        data-plasmic-override={overrides.frame36}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame36)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"frame37"}
          data-plasmic-override={overrides.frame37}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame37)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame38"}
            data-plasmic-override={overrides.frame38}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame38)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8GJph
                  )}
                >
                  {"Vishakha Singh"}
                </div>
              ),

              value: args.jessyMendiola,
              className: classNames(sty.slotTargetJessyMendiola)
            })}

            <p.Stack
              as={"div"}
              data-plasmic-name={"badge"}
              data-plasmic-override={overrides.badge}
              hasGap={true}
              className={classNames(projectcss.all, sty.badge)}
            >
              {false ? (
                <DotIcon
                  className={classNames(projectcss.all, sty.svg__aaF8G)}
                  role={"img"}
                />
              ) : null}

              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__tj7Ke)}
                displayHeight={"12px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"12px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/blank_project/images/lucideIcon.svg",
                  fullWidth: 12,
                  fullHeight: 12,
                  aspectRatio: 1
                }}
              />

              <div
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(projectcss.all, sty.label)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__inIB
                      )}
                    >
                      {"5.0"}
                    </div>
                  ),

                  value: args.label2,
                  className: classNames(sty.slotTargetLabel2)
                })}
              </div>

              <div
                data-plasmic-name={"label3"}
                data-plasmic-override={overrides.label3}
                className={classNames(projectcss.all, sty.label3)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xf4U
                      )}
                    >
                      {"(103)"}
                    </div>
                  ),

                  value: args.label4,
                  className: classNames(sty.slotTargetLabel4)
                })}
              </div>

              {false ? (
                <CloseIcon
                  className={classNames(projectcss.all, sty.svg__eZtpZ)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame39"}
            data-plasmic-override={overrides.frame39}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame39)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame40"}
              data-plasmic-override={overrides.frame40}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame40)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aTnTt
                )}
              >
                {"Implantologist"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame45"}
              data-plasmic-override={overrides.frame45}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame45)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5BNjE
                )}
              >
                {"Dentist"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame46"}
              data-plasmic-override={overrides.frame46}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame46)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bfxWk
                )}
              >
                {"Consultant Orthodontist"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame47"}
              data-plasmic-override={overrides.frame47}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame47)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q2UH6
                )}
              >
                {"Periodontist"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame48"}
              data-plasmic-override={overrides.frame48}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame48)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__txDqh
                )}
              >
                {"Pediatric Dentist"}
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame6"}
          data-plasmic-override={overrides.frame6}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame6)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame1616"}
            data-plasmic-override={overrides.frame1616}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame1616)}
          >
            <SolidGeneralHomeIcon
              className={classNames(projectcss.all, sty.svg__er0Z)}
              role={"img"}
            />

            {p.renderPlasmicSlot({
              defaultContents: "Medcare Medical Center",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </p.Stack>

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Line4Icon
              className={classNames(projectcss.all, sty.svg__bRr35)}
              role={"img"}
            />
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame49"}
            data-plasmic-override={overrides.frame49}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame49)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame4281"}
              data-plasmic-override={overrides.frame4281}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame4281)}
            >
              <div
                data-plasmic-name={"location2"}
                data-plasmic-override={overrides.location2}
                className={classNames(projectcss.all, sty.location2)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__h7Iao)}
                  displayHeight={"14.781px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"10.5px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/blank_project/images/group.svg",
                    fullWidth: 10.5,
                    fullHeight: 14.781,
                    aspectRatio: 0.733333
                  }}
                />
              </div>

              {p.renderPlasmicSlot({
                defaultContents: "1st street, Trio Building, Dubai",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"frame4271"}
          data-plasmic-override={overrides.frame4271}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame4271)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"frame4269"}
            data-plasmic-override={overrides.frame4269}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame4269)}
          >
            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              component={Link}
              platform={"nextjs"}
            >
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                link={`/appointment`}
              >
                {"Book appointment"}
              </Button>
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame4286"}
            data-plasmic-override={overrides.frame4286}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame4286)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "from 200 AED",
              value: args.slot3,
              className: classNames(sty.slotTargetSlot3)
            })}
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame36",
    "frame37",
    "frame38",
    "badge",
    "label",
    "label3",
    "frame39",
    "frame40",
    "frame45",
    "frame46",
    "frame47",
    "frame48",
    "frame6",
    "frame1616",
    "freeBox",
    "frame49",
    "frame4281",
    "location2",
    "frame4271",
    "frame4269",
    "link",
    "button",
    "frame4286"
  ],
  frame36: [
    "frame36",
    "frame37",
    "frame38",
    "badge",
    "label",
    "label3",
    "frame39",
    "frame40",
    "frame45",
    "frame46",
    "frame47",
    "frame48",
    "frame6",
    "frame1616",
    "freeBox",
    "frame49",
    "frame4281",
    "location2",
    "frame4271",
    "frame4269",
    "link",
    "button",
    "frame4286"
  ],
  frame37: [
    "frame37",
    "frame38",
    "badge",
    "label",
    "label3",
    "frame39",
    "frame40",
    "frame45",
    "frame46",
    "frame47",
    "frame48"
  ],
  frame38: ["frame38", "badge", "label", "label3"],
  badge: ["badge", "label", "label3"],
  label: ["label"],
  label3: ["label3"],
  frame39: ["frame39", "frame40", "frame45", "frame46", "frame47", "frame48"],
  frame40: ["frame40"],
  frame45: ["frame45"],
  frame46: ["frame46"],
  frame47: ["frame47"],
  frame48: ["frame48"],
  frame6: [
    "frame6",
    "frame1616",
    "freeBox",
    "frame49",
    "frame4281",
    "location2"
  ],
  frame1616: ["frame1616"],
  freeBox: ["freeBox"],
  frame49: ["frame49", "frame4281", "location2"],
  frame4281: ["frame4281", "location2"],
  location2: ["location2"],
  frame4271: ["frame4271", "frame4269", "link", "button", "frame4286"],
  frame4269: ["frame4269", "link", "button"],
  link: ["link", "button"],
  button: ["button"],
  frame4286: ["frame4286"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame36: "div";
  frame37: "div";
  frame38: "div";
  badge: "div";
  label: "div";
  label3: "div";
  frame39: "div";
  frame40: "div";
  frame45: "div";
  frame46: "div";
  frame47: "div";
  frame48: "div";
  frame6: "div";
  frame1616: "div";
  freeBox: "div";
  frame49: "div";
  frame4281: "div";
  location2: "div";
  frame4271: "div";
  frame4269: "div";
  link: "a";
  button: typeof Button;
  frame4286: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDoctorPreview__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDoctorPreview__VariantsArgs;
    args?: PlasmicDoctorPreview__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDoctorPreview__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDoctorPreview__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDoctorPreview__ArgProps,
          internalVariantPropNames: PlasmicDoctorPreview__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDoctorPreview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDoctorPreview";
  } else {
    func.displayName = `PlasmicDoctorPreview.${nodeName}`;
  }
  return func;
}

export const PlasmicDoctorPreview = Object.assign(
  // Top-level PlasmicDoctorPreview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame36: makeNodeComponent("frame36"),
    frame37: makeNodeComponent("frame37"),
    frame38: makeNodeComponent("frame38"),
    badge: makeNodeComponent("badge"),
    label: makeNodeComponent("label"),
    label3: makeNodeComponent("label3"),
    frame39: makeNodeComponent("frame39"),
    frame40: makeNodeComponent("frame40"),
    frame45: makeNodeComponent("frame45"),
    frame46: makeNodeComponent("frame46"),
    frame47: makeNodeComponent("frame47"),
    frame48: makeNodeComponent("frame48"),
    frame6: makeNodeComponent("frame6"),
    frame1616: makeNodeComponent("frame1616"),
    freeBox: makeNodeComponent("freeBox"),
    frame49: makeNodeComponent("frame49"),
    frame4281: makeNodeComponent("frame4281"),
    location2: makeNodeComponent("location2"),
    frame4271: makeNodeComponent("frame4271"),
    frame4269: makeNodeComponent("frame4269"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),
    frame4286: makeNodeComponent("frame4286"),

    // Metadata about props expected for PlasmicDoctorPreview
    internalVariantProps: PlasmicDoctorPreview__VariantProps,
    internalArgProps: PlasmicDoctorPreview__ArgProps
  }
);

export default PlasmicDoctorPreview;
/* prettier-ignore-end */
